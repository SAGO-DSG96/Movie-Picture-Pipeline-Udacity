name: Deploy to ECR Backend CD Pipeline

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY_BACKEND: ${{ secrets.ECR_REPOSITORY_BACKEND }}
  CLUSTER_NAME: movie-pipeline-cluster

defaults:
  run:
    working-directory: ./starter/backend

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from repository
        uses: actions/checkout@v3

      - name: Set up Python3
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: pip install pipenv flake8

      - name: Cache Pipenv
        uses: actions/cache@v3
        with:
          path: |
            ~/.local/share/virtualenvs
            ~/.pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install pipenv
        run: pip install pipenv flake8

      - name: Install dependencies
        run: pipenv install

      - name: Run the linter
        run: pipenv run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from Repository
        uses: actions/checkout@v3

      - name: Set up Python3
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies
        run: pipenv install

      - name: Run tests
        run:  pipenv run test
        
  build-and-deploy:
    needs: [linting, test]
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest .
      
      - name: Push Docker image
        run:
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
      
      - name: Configure kubeconfig
        run: aws eks update-kubeconfig --name movie-pipeline-cluster --region us-east-1

      - name: Deploy Docker Image to Amazon EKS
        run: |
          cd k8s
          kustomize edit set image backend=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
          kustomize build | kubectl apply -f -

      - name: K8 status
        run :   |
          kubectl get pods -A