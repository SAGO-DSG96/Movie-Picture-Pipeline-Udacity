name: Frontend Continuous Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'  # Adjust this to match your frontend directory

jobs:
  frontend-build:
    runs-on: ubuntu-latest
    needs: backend-deploy  # Ensure it runs after backend deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'  # Adjust to your preferred Node.js version

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd frontend
          npm install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image for frontend
        run: |
          docker build --build-arg REACT_APP_MOVIE_API_URL=${{ needs.backend-deploy.outputs.backend_url }} -t $ECR_REPOSITORY_FRONTEND:latest .

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag Docker image for ECR
        run: |
          docker tag $ECR_REPOSITORY_FRONTEND:latest $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

      - name: Push Docker image to ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

      - name: Deploy frontend to Kubernetes
        run: |
          # Assuming you have kubectl setup and k8s config ready for deployment
          kubectl set image deployment/frontend-deployment frontend=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
          kubectl rollout restart deployment/frontend-deployment

